[{"content":"前言 网上有很多安装K8S的流程，但有写文章覆盖不全，有些文章描述不清，给人带来很大困惑。\n于是结合自己的安装经历和网上的流程，整合一篇从空服务器安装的过程，便于自己再次部署和给其他人提供参考。\n0.环境检查 # 先更新源，再把服务器重启下，有的服务器有问题，一次性的，关机后启动不了，由于安装k8s会修改内核参数，后面起不来了说不清楚，避免背锅 apt update shutdown -r now 1.环境准备 1.1 修改镜像源 # 1.备份原文件 mv /etc/apt/sources.list /etc/apt/sources.list.bak # 2.查询系统版本号 cat /etc/os-release # 系统版本号，需要与国内源对应，否则可能会出问题。 # 可以在镜像站查找 https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ 自己的系统版本版对应的配置 # 3.1 写入通用源信息（ubuntu） cat \u0026gt; /etc/apt/sources.list \u0026lt;\u0026lt; EOF deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse EOF # 3.2 写入通用源信息（yum） cat \u0026lt;\u0026lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://pkgs.k8s.io/core:/stable:/v1.32/rpm/ enabled=1 gpgcheck=1 gpgkey=https://pkgs.k8s.io/core:/stable:/v1.32/rpm/repodata/repomd.xml.key exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni EOF # 4.更新源 apt update #更新软件列表 apt upgrade #更新本地软件 # 5.安装工具 1.2 硬盘挂载 部分服务器存在没有挂载硬盘的情况，需要手动检查挂载\n# 0.查看是否有硬盘未挂载 df -h # 查看当前已挂载硬盘 fdisk -l # 查看所有硬盘 # 对比上面两个结果，若存在未挂载的硬盘，则继续挂载 # 1.对硬盘进行分区 fdisk /dev/sdb # 进入交互界面后，可以使用 m 产看帮助 # 构建一个新分区依次输入： n # 创建新分区，可以默认直接回车 p # 创建主分区，可以默认直接回车，分区号和扇区如无特殊要求，默认即可 w # 将分区表写入磁盘并退出 # 2.格式化 # 对上一步完成的分区进行格式化 # 2T 以上建议用 xfs 格式，2T以下建议 ext4 格式 mkfs.ext4 /dev/sdb1 # 3.创建一个目录并挂载 mkdir /data mount /dev/sdb1 /data # 4.添加自动挂载 echo \u0026#39;/dev/sdb1 /data ext4 defaults 0 0\u0026#39; \u0026gt;\u0026gt; /etc/fstab #注意这里是追加，别覆盖了 mount -a # 执行自动挂载 # 补充：如果k8s集群需要挂载nfs文件系统，服务器必须安装nfs-common apt -y install nfs-common showmount -e 192.168.10.100 cat \u0026#39;192.168.10.100:/nfs/share /share nfs vers=4,minorversion=0,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,_netdev,noresvport 0 0\u0026#39; \u0026gt;\u0026gt; /etc/fstab 1.3 修改系统配置 # 1.关闭防火墙 systemctl disable --now ufw apt purge ufw # 2.关闭selinux setenforce 0 #临时关闭 sed -i s#SELINUX=enforcing#SELINUX=disabled# /etc/selinux/config #永久关闭 # 3.关闭交换空间 swapoff -a \u0026amp;\u0026amp; sysctl -w vm.swappiness=0 sed -ri \u0026#39;/^[^#]*swap/s@^@#@\u0026#39; /etc/fstab # 4.同步时区 ln -svf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 5.配置limit cat \u0026gt;\u0026gt; /etc/security/limits.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; * soft nofile 655360 * hard nofile 131072 * soft nproc 655350 * hard nproc 655350 * soft memlock unlimited * hard memlock unlimited EOF # 6.优化sshd连接配置 # UseDNS打开状态下，当客户端试图登录SSH服务器时，服务器端先根据客户端的IP地址进行PTR反向查询出客户端的主机名 # 然后根据查询出的客户端主机名进行DNS正向A记录查询，验证与其原始IP地址是否一致，这是防止客户端欺骗的一种措施， # 但一般我们的是动态IP不会有PTR记录，打开这个选项不过是在白白浪费时间而已，不如将其关闭。 sed -i \u0026#39;s@#UseDNS yes@UseDNS no@g\u0026#39; /etc/ssh/sshd_config # 当GSSAPIAuthentication选项开启时，登陆的时候客户端需要对服务器端的IP地址进行反解析， # 如果服务器的IP地址没有配置PTR记录，很容易在这里卡住到超时。 sed -i \u0026#39;s@^GSSAPIAuthentication yes@GSSAPIAuthentication no@g\u0026#39; /etc/ssh/sshd_config # 7.内核优化 cat \u0026gt; /etc/sysctl.d/k8s.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; net.ipv4.ip_forward = 1 net.bridge.bridge-nf-call-iptables = 1 net.bridge.bridge-nf-call-ip6tables = 1 net.ipv6.conf.all.disable_ipv6 = 1 fs.may_detach_mounts = 1 vm.overcommit_memory=1 vm.panic_on_oom=0 fs.inotify.max_user_watches=89100 fs.file-max=52706963 fs.nr_open=52706963 net.netfilter.nf_conntrack_max=2310720 net.ipv4.tcp_keepalive_time = 600 net.ipv4.tcp_keepalive_probes = 3 net.ipv4.tcp_keepalive_intvl =15 net.ipv4.tcp_max_tw_buckets = 36000 net.ipv4.tcp_tw_reuse = 1 net.ipv4.tcp_max_orphans = 327680 net.ipv4.tcp_orphan_retries = 3 net.ipv4.tcp_syncookies = 1 net.ipv4.tcp_max_syn_backlog = 16384 net.ipv4.ip_conntrack_max = 65536 net.ipv4.tcp_max_syn_backlog = 16384 net.ipv4.tcp_timestamps = 0 net.core.somaxconn = 16384 EOF sysctl --system #启用配置 2.安装组件 2.1 安装并启动containerd # 1.添加密钥 curl -sS https://mirrors.aliyun.com/docker-ce/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/aliyun-docker-ce.gpg # 2.写入Containerd源信息 echo \u0026#34;deb [signed-by=/usr/share/keyrings/aliyun-docker-ce.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/aliyun-docker-ce.list # 3.更新软件源 apt update # 4.安装containerd组件 apt -y install containerd.io # 5.加载模块 # 临时生效 modprobe -- overlay modprobe -- br_netfilter # 持久化 cat \u0026gt; /etc/modules-load.d/containerd.conf \u0026lt;\u0026lt;EOF overlay br_netfilter EOF # 6.重新初始化containerd的配置文件 containerd config default | tee /etc/containerd/config.toml # 修改Cgroup的管理者为systemd组件 sed -ri \u0026#39;s#^(\\s*SystemdCgroup = ).*$#\\1true#\u0026#39; /etc/containerd/config.toml # 修改pause的基础镜像名称 sed -ri \u0026#39;s#^(\\s*sandbox_image = ).*$#\\1\u0026#34;registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.9\u0026#34;#\u0026#39; /etc/containerd/config.toml # 设置镜像保存路径 sed -ri \u0026#39;s#^(\\s*root = ).*$#\\1\u0026#34;/data/containerd/root\u0026#34;#\u0026#39; /etc/containerd/config.toml #保存持久化数据,默认值/var/lib/containerd sed -ri \u0026#39;s#^(\\s*state = ).*$#\\1\u0026#34;/data/containerd/run\u0026#34;#\u0026#39; /etc/containerd/config.toml #保存运行时临时数据,默认值/run/containerd # 设置镜像仓库地址 sed -ri \u0026#39;s#^(\\s*config_path = ).*$#\\1\u0026#34;/etc/containerd/certs.d\u0026#34;#\u0026#39; /etc/containerd/config.toml # 7.配置国内镜像（重要） mkdir -p /etc/containerd/certs.d/docker.io cat \u0026gt; /etc/containerd/certs.d/docker.io/hosts.toml \u0026lt;\u0026lt; EOF server = \u0026#34;https://docker.io\u0026#34; [host.\u0026#34;https://docker.1panel.live\u0026#34;] capabilities = [\u0026#34;pull\u0026#34;, \u0026#34;resolve\u0026#34;] [host.\u0026#34;https://docker.m.daocloud.io\u0026#34;] capabilities = [\u0026#34;pull\u0026#34;, \u0026#34;resolve\u0026#34;] [host.\u0026#34;https://dockerhub.timeweb.cloud\u0026#34;] capabilities = [\u0026#34;pull\u0026#34;, \u0026#34;resolve\u0026#34;] [host.\u0026#34;https://4fb4b8dbaee8420cbcb88afdafa26584.mirror.swr.myhuaweicloud.com\u0026#34;] capabilities = [\u0026#34;pull\u0026#34;, \u0026#34;resolve\u0026#34;] EOF # 8.启动containerd systemctl daemon-reload # 刷新服务守护 systemctl restart containerd # 重启服务 systemctl enable containerd # 设置开机启动 systemctl status containerd # 查看运行状态 # （可选）9.配置crictl客户端连接的运行时位置 ，使用ctr管理时必须配置 cat \u0026gt; /etc/crictl.yaml \u0026lt;\u0026lt;EOF runtime-endpoint: unix:///run/containerd/containerd.sock image-endpoint: unix:///run/containerd/containerd.sock timeout: 10 debug: false EOF 2.2 安装并启动K8S # 1.添加源密钥 curl -fsSL https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.30/deb/Release.key | apt-key add - # 2.写入K8S源信息 cat \u0026gt; /etc/apt/sources.list.d/kubernetes.list \u0026lt;\u0026lt;EOF deb https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.30/deb/ / EOF # 3.更新软件列表 sudo apt update # 4.安装k8s相关工具 apt install -y kubelet kubeadm kubectl systemctl enable kubelet #设置开机自启动 2.3 安装负载均衡（HAProxy） 计划安装多个主节点，且没有外层负载均衡设备或服务时执行\n# 1.获取安装包 wget https://www.haproxy.org/download/2.8/src/haproxy-2.8.3.tar.gz # 2.解压 tar zxvf haproxy-2.8.3.tar.gz # 3.编译 cd haproxy-2.8.3/ make TARGET=linux-glibc PREFIX=/data/haproxy make install PREFIX=/data/haproxy # 4.配置文件 mkdir -p /data/haproxy/conf cat \u0026gt; /data/haproxy/conf/haproxy.cfg \u0026lt;\u0026lt;EOF global zero-warning chroot /data/haproxy daemon maxconn 4000 pidfile /var/run/haproxy.pid hard-stop-after 5m defaults timeout client 30s timeout server 30s timeout connect 30s balance roundrobin listen k8s_control_plane bind 0.0.0.0:7443 mode tcp log global balance leastconn option tcp-check server serverA 192.168.10.10:6443 weight 6 check inter 3000 fastinter 1000 downinter 30000 rise 5 fall 3 server serverB 192.168.10.11:6443 weight 4 check inter 3000 fastinter 1000 downinter 30000 rise 5 fall 3 listen stats bind 0.0.0.0:8080 mode http stats enable log global stats uri /haproxy-status stats auth admin:123456 EOF # 5.注册服务 cat \u0026gt; /etc/systemd/system/haproxy.service \u0026lt;\u0026lt;EOF [Unit] Description=HAProxy DefaultDependencies=no After=network.target [Service] Type=forking ExecStart=/data/haproxy/sbin/haproxy -f /data/haproxy/conf/haproxy.cfg LimitNOFILE=infinity [Install] WantedBy=multi-user.target EOF # 6.启用服务 systemctl daemon-reload systemctl enable haproxy.service systemctl start haproxy.service 3.配置并使用 3.1 配置主节点 # 1.生成默认配置文件 kubeadm config print init-defaults \u0026gt; kubeadm-master-config.yaml # 2.修改配置文件 vim kubeadm-master-config.yaml # ----- kubeadm-master-config.yaml ----- kind: InitConfiguration advertiseAddress {master的ip} name {master计算机名} imageRepository {国内镜像私服 registry.aliyuncs.com/google_containers} #----------------------------------------------------------------- kind: ClusterConfiguration controlPlaneEndpoint: #apiServer对外地址和端口,负载均衡地址 apiServer: certSANs: #apiServer证书列表 - 192.168.0.23 - 192.168.0.24 - 192.168.0.28 - 192.168.0.29 networking: serviceSubnet: 10.96.0.0/12 #svc网络 podSubnet: 10.244.0.0/16 #pod网络 # ----- kubeadm-master-config.yaml ----- # 3.创建主节点 kubeadm reset kubeadm init --config kubeadm-master-config.yaml 3.2 设置kube环境 #root用户 echo \u0026#39;KUBECONFIG=/etc/kubernetes/admin.conf\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc #普通用户 mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config 3.3 配置通讯路由 # 使用flannel管理路由 kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml 3.4 检查主节点状态 观察节点状态，检查pod都是否正常运行\n# 节点状态 kubectl get node # pod状态 kubectl get pod -A 3.5 加入其他节点 #查看 token 和 discovery-token-ca-cert-hash kubeadm token list openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2\u0026gt;/dev/null | openssl dgst -sha256 -hex | sed \u0026#39;s/^.* //\u0026#39; #如果是过期了，需要重新生成 # 生成work的join命令 kubeadm token create --print-join-command # 如果是master节点还需要重新生成certificate-key kubeadm init phase upload-certs --upload-certs #添加工作节点 kubeadm join {advertiseAddress}:6443 --token {token} \\ --discovery-token-ca-cert-hash sha256:{discovery-token-ca-cert-hash} #添加Master节点，对比添加work节点，需要添加 --control-plane --certificate-key {certificate-key} 选项 kubeadm join {advertiseAddress}:6443 --token {token} \\ --discovery-token-ca-cert-hash sha256:{discovery-token-ca-cert-hash} \\ --control-plane --certificate-key {certificate-key} 3.6 节点去污 master节点默认存在污点，不允许运行pod，需要去污\n# 去污 kubectl taint node {NodeName} node-role.kubernetes.io/control-plane- 4. 安装kuboard监控 kubectl label nodes {NodeName} k8s.kuboard.cn/role=etcd kubectl apply -f https://addons.kuboard.cn/kuboard/kuboard-v3-swr.yaml 5.其他问题 # 若flannel节点出现 Error registering network: failed to acquire lease: node \u0026#34;node\u0026#34; pod cidr not assigned 报错 # 卸载flannel kubectl delete -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml # 需要修改kube配置 vim /etc/kubernetes/manifests/kube-controller-manager.yaml # 添加 --allocate-node-cidrs=true --cluster-cidr=10.244.0.0/16 # 需要和init文件中配置的相同 # 重启 systemctl daemon-reload systemctl restart kubelet #再次安装 kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml # 修改允许的端口 vim /etc/kubernetes/manifests/kube-apiserver.yaml # 添加 - --service-node-port-range=1-65535 # 重启 systemctl daemon-reload systemctl restart kubelet ","permalink":"https://blog.morz.cc/posts/technology/ops/k8s/","summary":"前言 网上有很多安装K8S的流程，但有写文章覆盖不全，有些文章描述不清，给人带来很大困惑。\n于是结合自己的安装经历和网上的流程，整合一篇从空服务器安装的过程，便于自己再次部署和给其他人提供参考。\n0.环境检查 # 先更新源，再把服务器重启下，有的服务器有问题，一次性的，关机后启动不了，由于安装k8s会修改内核参数，后面起不来了说不清楚，避免背锅 apt update shutdown -r now 1.环境准备 1.1 修改镜像源 # 1.备份原文件 mv /etc/apt/sources.list /etc/apt/sources.list.bak # 2.查询系统版本号 cat /etc/os-release # 系统版本号，需要与国内源对应，否则可能会出问题。 # 可以在镜像站查找 https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ 自己的系统版本版对应的配置 # 3.1 写入通用源信息（ubuntu） cat \u0026gt; /etc/apt/sources.list \u0026lt;\u0026lt; EOF deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse deb-src http://mirrors.","title":"空服务器部署K8S流程"},{"content":"前言 网上有很多安装K8S的流程，但有写文章覆盖不全，有些文章描述不清，给人带来很大困惑。\n于是结合自己的安装经历和网上的流程，整合一篇从空服务器安装的过程，便于自己再次部署和给其他人提供参考。\n1.环境准备 预先一遍环境，如果已经配置好了，则跳过此步骤，直接开始安装\n1.1 修改镜像源 # 1.查询系统版本号 cat /etc/os-release # 系统版本号，需要与国内源对应，否则可能会出问题。 # 可以在镜像站查找 https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ 自己的系统版本版对应的配置 # 2.安装工具 yum install -y curl wget vim lsb_release openssl 1.2 硬盘挂载 部分服务器存在没有挂载硬盘的情况，需要手动检查挂载\n# 0.查看是否有硬盘未挂载 df -h # 查看当前已挂载硬盘 fdisk -l # 查看所有硬盘 # 对比上面两个结果，若存在未挂载的硬盘，则继续挂载 # 1.对硬盘进行分区 fdisk /dev/sdb # 进入交互界面后，可以使用 m 查看帮助 # 构建一个新分区依次输入： n # 创建新分区，可以默认直接回车 p # 创建主分区，可以默认直接回车，分区号和扇区如无特殊要求，默认即可 t # 改变分区1的属性 L # 查看有个属性对应的命令 8e # 改变分区1为 Linux LVM格式 w # 将分区表写入磁盘并退出 # 2.创建PV pvscan # 扫面系统PV pvcreate /dev/sdb1 # 创建PV pvdisplay # 查看PV # 3.创建 VG vgscan # 扫面系统VG vgcreate vg_test /dev/sdb1 # 创建VG vgdisplay # 查看VG # 4.创建LV lvscan # 扫面系统LV lvcreate -l ${上一步的EP total } -n lv_test vg_test # 创建LV lvdisplay # 查看LV # 5.格式化 # 对上一步完成的LVM进行格式化 # 2T 以上建议用 xfs 格式，2T以下建议 ext4 格式 mkfs.ext4 /dev/sdb1 # 6.创建一个目录并挂载 mkdir /data mount /dev/vg_test/lv_test /data # 7.添加自动挂载 echo \u0026#39;/dev/mapper/vg_test-lv_test /test ext4 defaults 1 2\u0026#39; \u0026gt;\u0026gt; /etc/fstab #注意这里是追加，别覆盖了 mount -a # 执行自动挂载 # 补充：如果k8s集群需要挂载nfs文件系统，服务器必须安装nfs-common yum -y install nfs-common showmount -e 192.168.10.100 cat \u0026#39;192.168.10.100:/nfs/share /share nfs vers=4,minorversion=0,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,_netdev,noresvport 0 0\u0026#39; \u0026gt;\u0026gt; /etc/fstab 1.3 修改系统配置 # 1.关闭防火墙 systemctl disable --now firewalld # 2.关闭selinux setenforce 0 #临时关闭 sed -i s#SELINUX=enforcing#SELINUX=disabled# /etc/selinux/config #永久关闭 # 3.关闭交换空间 swapoff -a \u0026amp;\u0026amp; sysctl -w vm.swappiness=0 sed -ri \u0026#39;/^[^#]*swap/s@^@#@\u0026#39; /etc/fstab # 4.同步时区 ln -svf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 5.配置limit cat \u0026gt;\u0026gt; /etc/security/limits.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; * soft nofile 655360 * hard nofile 131072 * soft nproc 655350 * hard nproc 655350 * soft memlock unlimited * hard memlock unlimited EOF # 6.优化sshd连接配置 # UseDNS打开状态下，当客户端试图登录SSH服务器时，服务器端先根据客户端的IP地址进行PTR反向查询出客户端的主机名 # 然后根据查询出的客户端主机名进行DNS正向A记录查询，验证与其原始IP地址是否一致，这是防止客户端欺骗的一种措施， # 但一般我们的是动态IP不会有PTR记录，打开这个选项不过是在白白浪费时间而已，不如将其关闭。 sed -i \u0026#39;s@#UseDNS yes@UseDNS no@g\u0026#39; /etc/ssh/sshd_config # 当GSSAPIAuthentication选项开启时，登陆的时候客户端需要对服务器端的IP地址进行反解析， # 如果服务器的IP地址没有配置PTR记录，很容易在这里卡住到超时。 sed -i \u0026#39;s@^GSSAPIAuthentication yes@GSSAPIAuthentication no@g\u0026#39; /etc/ssh/sshd_config # 7.内核优化 cat \u0026gt; /etc/sysctl.d/k8s.conf \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; net.ipv4.ip_forward = 1 net.bridge.bridge-nf-call-iptables = 1 net.bridge.bridge-nf-call-ip6tables = 1 net.ipv6.conf.all.disable_ipv6 = 1 fs.may_detach_mounts = 1 vm.overcommit_memory=1 vm.panic_on_oom=0 fs.inotify.max_user_watches=89100 fs.file-max=52706963 fs.nr_open=52706963 net.netfilter.nf_conntrack_max=2310720 net.ipv4.tcp_keepalive_time = 600 net.ipv4.tcp_keepalive_probes = 3 net.ipv4.tcp_keepalive_intvl =15 net.ipv4.tcp_max_tw_buckets = 36000 net.ipv4.tcp_tw_reuse = 1 net.ipv4.tcp_max_orphans = 327680 net.ipv4.tcp_orphan_retries = 3 net.ipv4.tcp_syncookies = 1 net.ipv4.tcp_max_syn_backlog = 16384 net.ipv4.ip_conntrack_max = 65536 net.ipv4.tcp_max_syn_backlog = 16384 net.ipv4.tcp_timestamps = 0 net.core.somaxconn = 16384 EOF sysctl --system #启用配置 2.安装组件 2.1 安装并启动containerd # 1.安装containerd wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo yum install -y containerd # 2.加载模块 # 临时生效 modprobe -- overlay modprobe -- br_netfilter # 持久化 cat \u0026gt; /etc/modules-load.d/containerd.conf \u0026lt;\u0026lt;EOF overlay br_netfilter EOF # 3.重新初始化containerd的配置文件 containerd config default | tee /etc/containerd/config.toml # 修改Cgroup的管理者为systemd组件 sed -ri \u0026#39;s#^(\\s*SystemdCgroup = ).*$#\\1true#\u0026#39; /etc/containerd/config.toml # 修改pause的基础镜像名称 sed -ri \u0026#39;s#^(\\s*sandbox_image = ).*$#\\1\u0026#34;registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.10\u0026#34;#\u0026#39; /etc/containerd/config.toml # 设置镜像保存路径 sed -ri \u0026#39;s#^(\\s*root = ).*$#\\1\u0026#34;/data/containerd/root\u0026#34;#\u0026#39; /etc/containerd/config.toml #保存持久化数据,默认值/var/lib/containerd sed -ri \u0026#39;s#^(\\s*state = ).*$#\\1\u0026#34;/data/containerd/run\u0026#34;#\u0026#39; /etc/containerd/config.toml #保存运行时临时数据,默认值/run/containerd # 设置镜像仓库地址 sed -ri \u0026#39;s#^(\\s*config_path = ).*$#\\1\u0026#34;/etc/containerd/certs.d\u0026#34;#\u0026#39; /etc/containerd/config.toml # 4.配置国内镜像（重要） mkdir -p /etc/containerd/certs.d/docker.io cat \u0026gt; /etc/containerd/certs.d/docker.io/hosts.toml \u0026lt;\u0026lt; EOF server = \u0026#34;https://docker.io\u0026#34; [host.\u0026#34;https://docker.1panel.live\u0026#34;] capabilities = [\u0026#34;pull\u0026#34;, \u0026#34;resolve\u0026#34;] [host.\u0026#34;https://docker.m.daocloud.io\u0026#34;] capabilities = [\u0026#34;pull\u0026#34;, \u0026#34;resolve\u0026#34;] EOF # 5.启动containerd systemctl daemon-reload # 刷新服务守护 systemctl restart containerd # 重启服务 systemctl enable containerd # 设置开机启动 systemctl status containerd # 查看运行状态 # （可选）6.配置crictl客户端连接的运行时位置 ，使用ctr管理时必须配置 cat \u0026gt; /etc/crictl.yaml \u0026lt;\u0026lt;EOF runtime-endpoint: unix:///run/containerd/containerd.sock image-endpoint: unix:///run/containerd/containerd.sock timeout: 10 debug: false EOF 2.2 安装并启动K8S # 1.添加k8s源 cat \u0026lt;\u0026lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://pkgs.k8s.io/core:/stable:/v1.31/rpm/ enabled=1 gpgcheck=1 gpgkey=https://pkgs.k8s.io/core:/stable:/v1.31/rpm/repodata/repomd.xml.key EOF # 2.安装k8s相关工具 yum install -y kubelet kubeadm kubectl systemctl enable kubelet #设置开机自启动 # 3.安装其他依赖 yum install iproute-tc socat -y 3.配置并使用 3.1 配置主节点 # 1.生成默认配置文件 kubeadm config print init-defaults \u0026gt; kubeadm-master-config.yaml # 2.修改配置文件 vim kubeadm-master-config.yaml # ----- kubeadm-master-config.yaml ----- kind: InitConfiguration advertiseAddress {master的ip} name {master计算机名} imageRepository {国内镜像私服 registry.aliyuncs.com/google_containers} #----------------------------------------------------------------- kind: ClusterConfiguration controlPlaneEndpoint: #apiServer对外地址和端口,负载均衡地址 apiServer: certSANs: #apiServer证书列表 - 192.168.0.23 - 192.168.0.24 - 192.168.0.28 - 192.168.0.29 networking: serviceSubnet: 10.96.0.0/12 #svc网络 podSubnet: 10.244.0.0/16 #pod网络 # ----- kubeadm-master-config.yaml ----- # 3.创建主节点 kubeadm reset kubeadm init --config kubeadm-master-config.yaml 3.2 设置kube环境 #root用户 echo \u0026#39;export KUBECONFIG=/etc/kubernetes/admin.conf\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc #普通用户 mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config 3.3 配置通讯路由 # 使用flannel管理路由 kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml 3.4 检查主节点状态 观察节点状态，检查pod都是否正常运行\n# 节点状态 kubectl get node # pod状态 kubectl get pod -A 3.5 加入其他节点 #查看 token 和 discovery-token-ca-cert-hash kubeadm token list openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2\u0026gt;/dev/null | openssl dgst -sha256 -hex | sed \u0026#39;s/^.* //\u0026#39; #如果是过期了，需要重新生成 # 生成work的join命令 kubeadm token create --print-join-command # 如果是master节点还需要重新生成certificate-key kubeadm init phase upload-certs --upload-certs #添加工作节点 kubeadm join {advertiseAddress}:6443 --token {token} \\ --discovery-token-ca-cert-hash sha256:{discovery-token-ca-cert-hash} #添加Master节点，对比添加work节点，需要添加 --control-plane --certificate-key {certificate-key} 选项 kubeadm join {advertiseAddress}:6443 --token {token} \\ --discovery-token-ca-cert-hash sha256:{discovery-token-ca-cert-hash} \\ --control-plane --certificate-key {certificate-key} 3.6 节点去污 master节点默认存在污点，不允许运行pod，需要去污\n# 去污 kubectl taint node {NodeName} node-role.kubernetes.io/control-plane- 4. 安装kuboard监控 kubectl label nodes {NodeName} k8s.kuboard.cn/role=etcd kubectl apply -f https://addons.kuboard.cn/kuboard/kuboard-v3-swr.yaml 5.其他问题 # 若flannel节点出现 Error registering network: failed to acquire lease: node \u0026#34;node\u0026#34; pod cidr not assigned 报错 # 卸载flannel kubectl delete -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml # 需要修改kube配置 vim /etc/kubernetes/manifests/kube-controller-manager.yaml # 添加 --allocate-node-cidrs=true --cluster-cidr=10.244.0.0/16 # 需要和init文件中配置的相同 # 重启 systemctl restart kubelet #再次安装 kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml ","permalink":"https://blog.morz.cc/posts/technology/ops/k8s-anolis/","summary":"前言 网上有很多安装K8S的流程，但有写文章覆盖不全，有些文章描述不清，给人带来很大困惑。\n于是结合自己的安装经历和网上的流程，整合一篇从空服务器安装的过程，便于自己再次部署和给其他人提供参考。\n1.环境准备 预先一遍环境，如果已经配置好了，则跳过此步骤，直接开始安装\n1.1 修改镜像源 # 1.查询系统版本号 cat /etc/os-release # 系统版本号，需要与国内源对应，否则可能会出问题。 # 可以在镜像站查找 https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ 自己的系统版本版对应的配置 # 2.安装工具 yum install -y curl wget vim lsb_release openssl 1.2 硬盘挂载 部分服务器存在没有挂载硬盘的情况，需要手动检查挂载\n# 0.查看是否有硬盘未挂载 df -h # 查看当前已挂载硬盘 fdisk -l # 查看所有硬盘 # 对比上面两个结果，若存在未挂载的硬盘，则继续挂载 # 1.对硬盘进行分区 fdisk /dev/sdb # 进入交互界面后，可以使用 m 查看帮助 # 构建一个新分区依次输入： n # 创建新分区，可以默认直接回车 p # 创建主分区，可以默认直接回车，分区号和扇区如无特殊要求，默认即可 t # 改变分区1的属性 L # 查看有个属性对应的命令 8e # 改变分区1为 Linux LVM格式 w # 将分区表写入磁盘并退出 # 2.","title":"空服务器部署K8S流程-龙蜥"},{"content":"博弈的复杂性 在上一篇中，简单的介绍了下什么是博弈论，以及博弈论可以解决什么问题，但是实际生活中遇到的情况远比公式、模型复杂。\n比如在上一篇最后的问题中就涉及到了博弈中的利益权重。\n假设哥哥更喜欢吃奶油，弟弟更喜欢吃面包，那又需要如何分配才能保证哥哥和弟弟的利益最大化呢？ ","permalink":"https://blog.morz.cc/posts/pen/byl-2/","summary":"博弈的复杂性 在上一篇中，简单的介绍了下什么是博弈论，以及博弈论可以解决什么问题，但是实际生活中遇到的情况远比公式、模型复杂。\n比如在上一篇最后的问题中就涉及到了博弈中的利益权重。\n假设哥哥更喜欢吃奶油，弟弟更喜欢吃面包，那又需要如何分配才能保证哥哥和弟弟的利益最大化呢？ ","title":"博弈论-第二篇"},{"content":"问题 如何找到多方中的最优解（最大化利益） 如何促成一次合作 如何在合作中约束各方不作弊 囚徒困境与纳什均衡 我们先来看一个小故事\n警察抓住了两名惯盗，张三和李四。 但狡猾的惯盗并没有留下过多证据，如果两人都辩称没有参与其他盗窃案，则由于证据不住而只能定义为普通盗窃，各判处三年有期徒刑。 在陷入困难之际，检察官想到了一个办法。 检察官先来到张三的羁押房，表示如果李四认罪，而他不认罪，在并案数罚的情况下李四自首能获得减刑，只判五年，而他由于拒不招供，则会判处十年徒刑。 这样一来，如果他相信李四会认罪，最好他自己也认罪，判五年总比判十年来得好。 检查官又表示，如果他能认罪，并作为污点证人指控李四，由于是大案，那么会将他的刑期减为一年。 这样似乎对张三最好的做法就是认罪。 可是回头，检察官又对李四说了同样的话。 最终，他们都被判了四年。 这便是囚徒困境。两人都认为选择了能使自己更受益策略而获得双败结果。 让我们来用图表展示这个关系\n李四认罪 李四不认罪 张三认罪 5,5 1,10 张三不认罪 10,1 3,3 从图中可以看出，不论对方是否认罪，自己选择认罪的收益更高。 而双方都认罪的选择，称为达到了博弈的纳什均衡\n在博弈论中，纳什均衡是这么定义的\n在各方面都选择了同一种策略的情况下，没有一方能通过独自改变策略而获益。此时的策略搭配和后续的结果，就被成为纳什均衡。 合作与竞争 上面的小故事只是简单的介绍了囚徒困境与纳什均衡，通常只要双方好好沟通，互相妥协，就能好好收场。\n但不幸的是，往往达成协议后会有一方反悔，究其原因是，如果合作达成的方案并非纳什均衡，当其中一方改变想法时，的确就能获得对其自身更好的结果。\\\n一般而言，达成合作有两大挑战\n找到方式达成协议 找到方式让每个参与放都不改变主意 能解决这两个挑战的主要方式有三种\n群体性共识 如果大家都认为合作中作弊是不道德的，并且这个思想像饿了要吃饭一样基础，就能避免许多社会困境。 权威公平第三方 由外部的专业第三方来促成合作并约束各方守护公平。 自运行的机制 各方依赖详尽的策略规约，自动将合作状态调整为纳什均衡。 下面会一一审视这三种方法\n群体性共识 依稀记得，福建省有个案件，张三欠李四的钱不还，欠条被损毁了，法庭见调解无效，让张三对妈祖发誓没有欠钱。结果张三当庭承认了欠款，并在妈祖的见证下并重新约定了还款时间。\n可能这也算是权威公平第三方吧\n群体性共识的前提，就是共识群体性，当合作方并不在共识范围内，那么并不能不能保证共识还能生效，西方的神就管不了东方的天。\n权威公平第三方 旅游旺季的时候看到新闻，某酒店因为节假日房价上涨，于是要求在节前在第三方平台上预购的游客，要么这退房，要么补差价。\n而游客没有办法只能向平台投诉。而平台处理结果也不尽人意。最终由于高峰期一房难求，导致游客补了差价。\n所以对于权威公平第三方而言，需要其本身有强大权威，公平与约束力，否则并不能有效约束参与方进行策略切换，而损害其他参与方的利益。\n自运行的机制 将纳什均衡作为一种能够自动运行的机制，让合作期间没有作弊的动机。由于处于纳什均衡下，任意一方改变策略并没有任何好处。合作方放就没有必要进行任何改动。\n但是如果需要合作的情景不属于纳什均衡，任意一方都可能想小小的改变一下，打破协议，获取更多的好处。\n文章主要是详解第三种方法（当然是第三种了，文章名都叫博弈论了，不会指望在这里能看到社会学和法学的东西吧）\n公平分配 大中取小 先衡量局势，考虑各种不同的选择造成的最大损失或最坏结果是什么，再决定如何让损失最小。追求最佳的可行性，而不是最佳的可能性。\n我切你选 一个简单的公平策略就是 我切你选 举个简单的例子\n兄弟两人要分一块蛋糕，他们猜拳后决定由哥哥先切，弟弟来选。 哥哥为了让自己获得更多的蛋糕，而会尽可能和将蛋糕分成两份自己都可以接受的大小，这样弟弟无论选择哪一份，哥哥获得另一份都是可以接受的。 而弟弟则会在哥哥切好的两份中选择一份更好的。将自己认为不好的给哥哥。 这样双方都觉得公平，而不需要依赖不吃蛋糕的父母来进行分配。 不过在这个例子中有个忽略的细节，假设哥哥更喜欢吃奶油，弟弟更喜欢吃面包，那又需要如何分配才能保证哥哥和弟弟的利益最大化呢？\n","permalink":"https://blog.morz.cc/posts/pen/byl-1/","summary":"问题 如何找到多方中的最优解（最大化利益） 如何促成一次合作 如何在合作中约束各方不作弊 囚徒困境与纳什均衡 我们先来看一个小故事\n警察抓住了两名惯盗，张三和李四。 但狡猾的惯盗并没有留下过多证据，如果两人都辩称没有参与其他盗窃案，则由于证据不住而只能定义为普通盗窃，各判处三年有期徒刑。 在陷入困难之际，检察官想到了一个办法。 检察官先来到张三的羁押房，表示如果李四认罪，而他不认罪，在并案数罚的情况下李四自首能获得减刑，只判五年，而他由于拒不招供，则会判处十年徒刑。 这样一来，如果他相信李四会认罪，最好他自己也认罪，判五年总比判十年来得好。 检查官又表示，如果他能认罪，并作为污点证人指控李四，由于是大案，那么会将他的刑期减为一年。 这样似乎对张三最好的做法就是认罪。 可是回头，检察官又对李四说了同样的话。 最终，他们都被判了四年。 这便是囚徒困境。两人都认为选择了能使自己更受益策略而获得双败结果。 让我们来用图表展示这个关系\n李四认罪 李四不认罪 张三认罪 5,5 1,10 张三不认罪 10,1 3,3 从图中可以看出，不论对方是否认罪，自己选择认罪的收益更高。 而双方都认罪的选择，称为达到了博弈的纳什均衡\n在博弈论中，纳什均衡是这么定义的\n在各方面都选择了同一种策略的情况下，没有一方能通过独自改变策略而获益。此时的策略搭配和后续的结果，就被成为纳什均衡。 合作与竞争 上面的小故事只是简单的介绍了囚徒困境与纳什均衡，通常只要双方好好沟通，互相妥协，就能好好收场。\n但不幸的是，往往达成协议后会有一方反悔，究其原因是，如果合作达成的方案并非纳什均衡，当其中一方改变想法时，的确就能获得对其自身更好的结果。\\\n一般而言，达成合作有两大挑战\n找到方式达成协议 找到方式让每个参与放都不改变主意 能解决这两个挑战的主要方式有三种\n群体性共识 如果大家都认为合作中作弊是不道德的，并且这个思想像饿了要吃饭一样基础，就能避免许多社会困境。 权威公平第三方 由外部的专业第三方来促成合作并约束各方守护公平。 自运行的机制 各方依赖详尽的策略规约，自动将合作状态调整为纳什均衡。 下面会一一审视这三种方法\n群体性共识 依稀记得，福建省有个案件，张三欠李四的钱不还，欠条被损毁了，法庭见调解无效，让张三对妈祖发誓没有欠钱。结果张三当庭承认了欠款，并在妈祖的见证下并重新约定了还款时间。\n可能这也算是权威公平第三方吧\n群体性共识的前提，就是共识群体性，当合作方并不在共识范围内，那么并不能不能保证共识还能生效，西方的神就管不了东方的天。\n权威公平第三方 旅游旺季的时候看到新闻，某酒店因为节假日房价上涨，于是要求在节前在第三方平台上预购的游客，要么这退房，要么补差价。\n而游客没有办法只能向平台投诉。而平台处理结果也不尽人意。最终由于高峰期一房难求，导致游客补了差价。\n所以对于权威公平第三方而言，需要其本身有强大权威，公平与约束力，否则并不能有效约束参与方进行策略切换，而损害其他参与方的利益。\n自运行的机制 将纳什均衡作为一种能够自动运行的机制，让合作期间没有作弊的动机。由于处于纳什均衡下，任意一方改变策略并没有任何好处。合作方放就没有必要进行任何改动。\n但是如果需要合作的情景不属于纳什均衡，任意一方都可能想小小的改变一下，打破协议，获取更多的好处。\n文章主要是详解第三种方法（当然是第三种了，文章名都叫博弈论了，不会指望在这里能看到社会学和法学的东西吧）\n公平分配 大中取小 先衡量局势，考虑各种不同的选择造成的最大损失或最坏结果是什么，再决定如何让损失最小。追求最佳的可行性，而不是最佳的可能性。\n我切你选 一个简单的公平策略就是 我切你选 举个简单的例子\n兄弟两人要分一块蛋糕，他们猜拳后决定由哥哥先切，弟弟来选。 哥哥为了让自己获得更多的蛋糕，而会尽可能和将蛋糕分成两份自己都可以接受的大小，这样弟弟无论选择哪一份，哥哥获得另一份都是可以接受的。 而弟弟则会在哥哥切好的两份中选择一份更好的。将自己认为不好的给哥哥。 这样双方都觉得公平，而不需要依赖不吃蛋糕的父母来进行分配。 不过在这个例子中有个忽略的细节，假设哥哥更喜欢吃奶油，弟弟更喜欢吃面包，那又需要如何分配才能保证哥哥和弟弟的利益最大化呢？","title":"博弈论-第一篇"},{"content":"背景 有个需求，要给客户批量发邮件。需要包含复杂表格，不能用excel，需要直接展示。\n最开始采用了WangEdit,简单快捷，但是表格功能不强，只能增减格子，于是又各种查，找到了ckeditor。 鉴于在实现过程中发现了很多坑，在此记录一下。\n多年老坑:\nPossible to make editor.getData() returns content with inline styles?\n环境 前端脚手架: umi node: V18 安装CkEditor CKEditor有很多插件，不同的功能通过插件实现，安装的过程，就是将插件引入项目的过程。\n打开Quick start 可以安装步骤构建一个简单的富文本编辑器。\n但是显然这个简单的文本编辑器满足不了我的需求，但是有个在线构建说明 可以满足。\\\n打开在线构建页面 选择Classic模式 然后按照需求选择插件，默认选择中的Cloud Services是高级功能，要加钱，不要可以去掉，下面右上角有PREMIUM 标记的插件也是要加钱的。 然后选择哪些按钮常驻，哪些按钮隐藏（可以添加了插件，但是展示功能入口） 选择语言 然后就可以下载拉，如果选择的插件中有高级功能，会有一个要求添加license key的提示，可以返回第二步修改 下载完成后是一个zip，解压后打开sample/index.html查看效果，如果合适，则开始引入项目。 安装必须组件 // ckeditor react 组件 yarn add @ckeditor/ckeditor5-react @ckeditor/ckeditor5-build-classic // 将class转换为内联style,发邮件的时候用 yarn add juice 将build目录下全部文件拷贝到src/components/ckeditor下,并添加CkeditorUtil.ts 和 index.tsx // CkeditorUtil.ts // 参考 https://github.com/ckeditor/ckeditor5/issues/1627 import juice from \u0026#39;juice\u0026#39;; // @ts-ignore export const CkeditorUtil = { getEditorStyles() { const cssTexts = [], rootCssTexts = []; for (const styleSheets of document.styleSheets) { // @ts-ignore if (styleSheets.ownerNode.hasAttribute(\u0026#39;data-cke\u0026#39;)) { for (const cssRule of styleSheets[\u0026#39;cssRules\u0026#39;]) { if (cssRule.cssText.indexOf(\u0026#39;.ck-content\u0026#39;) !== -1) { cssTexts.push(cssRule.cssText); } else if (cssRule.cssText.indexOf(\u0026#39;:root\u0026#39;) !== -1) { rootCssTexts.push(cssRule.cssText); } } } } return cssTexts.length ? [...rootCssTexts, ...cssTexts].join(\u0026#39; \u0026#39;).trim() : \u0026#39;\u0026#39;; }, getContentWithLineStyles(editorContent: any) { // ck-content 参考 https://ckeditor.com/docs/ckeditor5/latest/installation/advanced/content-styles.html#sharing-content-styles-between-frontend-and-backend // Important! // If you take a closer look at the content styles, you may notice they are prefixed with the .ck-content class selector. // This narrows their scope when used in CKEditor 5 so they do not affect the rest of the application. // To use them in the front–end, you will have to add the ck-content CSS class to the container of your content. // Otherwise the styles will not be applied. return juice.inlineContent(`\u0026lt;div class=\u0026#34;ck-content\u0026#34;\u0026gt;${editorContent}\u0026lt;div\u0026gt;`, this.getEditorStyles()); } }; // index.tsx import ClassicEditor from \u0026#39;./ckeditor\u0026#39; import {CKEditor} from \u0026#39;@ckeditor/ckeditor5-react\u0026#39;; import {EventInfo} from \u0026#34;@ckeditor/ckeditor5-utils\u0026#34;; import {type Editor} from \u0026#39;ckeditor5/src/core\u0026#39; export {CkeditorUtil} from \u0026#34;./CkeditorUtil\u0026#34; interface Prop { disabled?: boolean initData?: string, onReady?: (editor: ClassicEditor) =\u0026gt; void, onBlur?: (data: string, event: EventInfo\u0026lt;string, any\u0026gt;, editor: ClassicEditor) =\u0026gt; void onFocus?: (data: string, event: EventInfo\u0026lt;string, any\u0026gt;, editor: ClassicEditor) =\u0026gt; void onChange?: (data: string, event: EventInfo\u0026lt;string, any\u0026gt;, editor: ClassicEditor) =\u0026gt; void autoSave?: (data: string, editor: Editor) =\u0026gt; void } export {ClassicEditor}; export const ContentEditor = ({disabled = false, initData, autoSave, onReady, onBlur, onFocus, onChange}: Prop) =\u0026gt; { return ( \u0026lt;CKEditor disabled={disabled} editor={ClassicEditor} config={{ autosave: { save(editor) { if (autoSave) { autoSave(editor.data.get(), editor); } return Promise.resolve(); } }, }} data={initData} onReady={editor =\u0026gt; { if (onReady) { onReady(editor); } }} onChange={(event, editor) =\u0026gt; { if (onChange) { onChange(editor.getData(), event, editor); } }} onBlur={(event, editor) =\u0026gt; { if (onBlur) { onBlur(editor.getData(), event, editor); } }} onFocus={(event, editor) =\u0026gt; { if (onFocus) { onFocus(editor.getData(), event, editor); } }} /\u0026gt; ) } 使用 配置完成后便可开始使用\nimport {ContentEditor, ClassicEditor, CkeditorUtil} from \u0026#39;@/components/ckeditor\u0026#39;; import {Button} from \u0026#34;antd\u0026#34;; export default function(){ const [classicEditor, setClassicEditor] = useState\u0026lt;ClassicEditor\u0026gt;() const genInlineContent = () =\u0026gt; { const originContent = classicEditor?.getData(); if (!originContent) { return; } // 将原始html转换为内联样式 // 不需要内联样式可以直接返回originContent return CkeditorUtil.getContentWithLineStyles(originContent); } const save = ()=\u0026gt;{ console.log(genInlineContent()) } return( \u0026lt;\u0026gt; \u0026lt;ContentEditor onReady={(editor) =\u0026gt; setClassicEditor(editor)}/\u0026gt; \u0026lt;Button onClick={save}\u0026gt;保存\u0026lt;/Button\u0026gt; \u0026lt;/\u0026gt; ) } ","permalink":"https://blog.morz.cc/posts/technology/web/ckeditor-to-email/","summary":"背景 有个需求，要给客户批量发邮件。需要包含复杂表格，不能用excel，需要直接展示。\n最开始采用了WangEdit,简单快捷，但是表格功能不强，只能增减格子，于是又各种查，找到了ckeditor。 鉴于在实现过程中发现了很多坑，在此记录一下。\n多年老坑:\nPossible to make editor.getData() returns content with inline styles?\n环境 前端脚手架: umi node: V18 安装CkEditor CKEditor有很多插件，不同的功能通过插件实现，安装的过程，就是将插件引入项目的过程。\n打开Quick start 可以安装步骤构建一个简单的富文本编辑器。\n但是显然这个简单的文本编辑器满足不了我的需求，但是有个在线构建说明 可以满足。\\\n打开在线构建页面 选择Classic模式 然后按照需求选择插件，默认选择中的Cloud Services是高级功能，要加钱，不要可以去掉，下面右上角有PREMIUM 标记的插件也是要加钱的。 然后选择哪些按钮常驻，哪些按钮隐藏（可以添加了插件，但是展示功能入口） 选择语言 然后就可以下载拉，如果选择的插件中有高级功能，会有一个要求添加license key的提示，可以返回第二步修改 下载完成后是一个zip，解压后打开sample/index.html查看效果，如果合适，则开始引入项目。 安装必须组件 // ckeditor react 组件 yarn add @ckeditor/ckeditor5-react @ckeditor/ckeditor5-build-classic // 将class转换为内联style,发邮件的时候用 yarn add juice 将build目录下全部文件拷贝到src/components/ckeditor下,并添加CkeditorUtil.ts 和 index.tsx // CkeditorUtil.ts // 参考 https://github.com/ckeditor/ckeditor5/issues/1627 import juice from \u0026#39;juice\u0026#39;; // @ts-ignore export const CkeditorUtil = { getEditorStyles() { const cssTexts = [], rootCssTexts = []; for (const styleSheets of document.","title":"使用ckeditor发送邮件"},{"content":"从公钥服务器接收失败 命令：\napt-key adv --keyserver keyserver.ubuntu.com --recv xxxx 错误提示：\ngpg: keyserver receive failed: Server indicated a failure\ngpg: 从公钥服务器接收失败：Server indicated a failure\n解决方案\n由于keyserver.ubuntu.com开放80端口，需要手动指定，否则会使用默认端口11371 添加协议名和端口后为： apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv xxxx 如果方案1中继续报错，可能是由于域名解析失败导致，可以在/etc/resolv.conf中修改dns配置为 nameserver 8.8.8.8 # Google DNS 或 nameserver 1.1.1.1 # Cloudflare 如果不可修改DNS或者修改后依旧失败，则可以使用ping来获取keyserver.ubuntu.com的真实IP，再替换到域名 ping keyserver.ubuntu.com #获取ip，我获取的是 185.125.188.27 apt-key adv --keyserver hkp://185.125.188.27:80 --recv xxxx #使用IP替换域名 签名失败 提示信息 gpg: 签名时失败： Inappropriate ioctl for device gpg: signing failed: Inappropriate ioctl for device 原因： gpg在签名时需要使用终端，但是当前终端没有输入输出，所以会报错。\n解决方案： # 临时 export GPG_TTY=$(tty) # 永久 echo \u0026#34;export GPG_TTY=$(tty)\u0026#34; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc ","permalink":"https://blog.morz.cc/posts/technology/web/gpg-tips/","summary":"从公钥服务器接收失败 命令：\napt-key adv --keyserver keyserver.ubuntu.com --recv xxxx 错误提示：\ngpg: keyserver receive failed: Server indicated a failure\ngpg: 从公钥服务器接收失败：Server indicated a failure\n解决方案\n由于keyserver.ubuntu.com开放80端口，需要手动指定，否则会使用默认端口11371 添加协议名和端口后为： apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv xxxx 如果方案1中继续报错，可能是由于域名解析失败导致，可以在/etc/resolv.conf中修改dns配置为 nameserver 8.8.8.8 # Google DNS 或 nameserver 1.1.1.1 # Cloudflare 如果不可修改DNS或者修改后依旧失败，则可以使用ping来获取keyserver.ubuntu.com的真实IP，再替换到域名 ping keyserver.ubuntu.com #获取ip，我获取的是 185.125.188.27 apt-key adv --keyserver hkp://185.125.188.27:80 --recv xxxx #使用IP替换域名 签名失败 提示信息 gpg: 签名时失败： Inappropriate ioctl for device gpg: signing failed: Inappropriate ioctl for device 原因： gpg在签名时需要使用终端，但是当前终端没有输入输出，所以会报错。","title":"gpg小记"},{"content":"一些网址 zlib geekdaxue ","permalink":"https://blog.morz.cc/posts/technology/utils/notebook/","summary":"一些网址 zlib geekdaxue ","title":"备忘录"},{"content":"一、介绍 在有背景和明确目的的情况下，一个决策的制定，往往会依赖于多个环境条件或其衍生条件，各个条件间可能互相影响和依赖，而随机森林就是将各个条件对结果的影响具象化表现。\n二、组成 从一个简单的例子开始：\n和女朋友约会，需要到达约会地点。 上面这个描述中，我们可以很清楚的知道。背景是约会，而目则是到达约会地点。\n基于正常情况（不考虑外星人），实现这个目标，我们有以下策略：\n公共交通 步行 自驾 打车 骑车 那么如何选择策略呢？可能有以下几个因素：\n天气 时间宽裕程度 交通便利性 目的地类型 约会计划 不同的条件会产生不同的决策，而不同的人基于自身因素也会对不同的条件产生不同的权重。各种权重和条件互相影响，最终导致选择了某一个决策。\n一个决策的产生，由环境背景、目标、条件及衍生条件、实现方案组成。\n而这些元素的定义域与值域组成了随机森林，使用随机森林可以预测在特定元素条件下最合适的决策。\n常用方法 ","permalink":"https://blog.morz.cc/posts/ml/random-forest/","summary":"一、介绍 在有背景和明确目的的情况下，一个决策的制定，往往会依赖于多个环境条件或其衍生条件，各个条件间可能互相影响和依赖，而随机森林就是将各个条件对结果的影响具象化表现。\n二、组成 从一个简单的例子开始：\n和女朋友约会，需要到达约会地点。 上面这个描述中，我们可以很清楚的知道。背景是约会，而目则是到达约会地点。\n基于正常情况（不考虑外星人），实现这个目标，我们有以下策略：\n公共交通 步行 自驾 打车 骑车 那么如何选择策略呢？可能有以下几个因素：\n天气 时间宽裕程度 交通便利性 目的地类型 约会计划 不同的条件会产生不同的决策，而不同的人基于自身因素也会对不同的条件产生不同的权重。各种权重和条件互相影响，最终导致选择了某一个决策。\n一个决策的产生，由环境背景、目标、条件及衍生条件、实现方案组成。\n而这些元素的定义域与值域组成了随机森林，使用随机森林可以预测在特定元素条件下最合适的决策。\n常用方法 ","title":"随机森林"},{"content":"头肩顶 头肩底 上升三角 下降三角 等边三角 旗形 箱体 缺口 ","permalink":"https://blog.morz.cc/posts/quant/illustrator/","summary":"头肩顶 头肩底 上升三角 下降三角 等边三角 旗形 箱体 缺口 ","title":"技术面基本图形"},{"content":"MACD 量价位图 加权平均线 K线 ","permalink":"https://blog.morz.cc/posts/quant/factor/","summary":"MACD 量价位图 加权平均线 K线 ","title":"技术面基本指标"},{"content":"一些常用配置文件类型介绍 适用场景只是个建议，理论来说，所有场景都行（力大砖飞，手动无敌）\n但是合适的场景会更省心一点。\n后缀为默认后缀，本质上都是文本类型文件，一般服务器上都是叫.conf,具体看打开之后的格式。\nini 介绍：最早的配置文件格式，解析简单，由win开始广泛使用\n后缀：.ini\n适用：层次简单的配置项，一般只有一层嵌套。\n; 注释用分号表示，由节、键、值 组成 ; 节类似于作用域，没有明确的结尾， [sction1] ; 节 key=vaue ; 键=值 [sction2] ; 第二个节开始 key=vaue ; 键=值 xml 介绍：最严格，程序解析简单，但是由于存在大量的关闭标签，导致新增配置项比较麻烦，配置效率低\n后缀：.xml\n建议：适用于默认配置或者存在自动格式化的场景(如果愿意手动对齐，放在服务器也是极好的)\n\u0026lt;!-- 注释是文本需要被左右两边包裹 --\u0026gt; \u0026lt;!-- 配置由节点组成，节点下可以是数值，也可以是节点，但是选择一种 --\u0026gt; \u0026lt;key\u0026gt; \u0026lt;aaa\u0026gt;v1\u0026lt;/aaa\u0026gt; \u0026lt;aaa\u0026gt;v2\u0026lt;/aaa\u0026gt; \u0026lt;bbb\u0026gt; \u0026lt;ccc\u0026gt;ccc\u0026lt;/ccc\u0026gt; \u0026lt;/bbb\u0026gt; \u0026lt;/key\u0026gt; property 介绍：主流配置方式，一行一个,结构简单，程序读取方便，存在嵌套结构时会出现大量重复前缀\n后缀：.property\n建议：比较适用于在服务器环境，或者简单基础配置解析的场景，适合配置项的新增和删除\n# 以#开始的行为注释行 a=1 a.b.a=2 a.b.a=3 b=3 yml 介绍：可读性很强,程序解析简单，但是配置层次关系依赖于缩进（注意：冒号后要空一格）\n后缀：.yml\n建议：适用于层次结构复杂，仅修改配置值，或者是有完善的格式化环境。\n# 以#开始的行为注释行 # 使用 - 来标记列表 key: a: v1 b: v2 list: - s1 - s2 map: k1: v1 k2: v2 toml 介绍：据说是yml的升级版本，像ini和yml的结合,语法有点多\n后缀：.toml\n建议：昂，我不用这个，不知道怎么建议，看这个语法就不想用，比较懒。\na = \u0026#34;a\u0026#34; b = \u0026#34;b\u0026#34; c.x = \u0026#34;c.x\u0026#34; c.y = \u0026#34;c.y\u0026#34; [d] x = \u0026#34;d.x\u0026#34; y = \u0026#34;d.y\u0026#34; [[e]] x = \u0026#34;e[0].x\u0026#34; y = \u0026#34;e[0].y\u0026#34; hocon 介绍：伸缩性强，能表述组，复杂层次结构，xml的简化版本，也可以直接降级为property 后缀: .conf\n建议：有大块的配置很适合，分组很清晰，多叉多级的复杂配置建议使用这个。\ng1:{ g11:{ } g12={ } g13{ } g14:123 g15=456 } ","permalink":"https://blog.morz.cc/posts/technology/utils/config/","summary":"一些常用配置文件类型介绍 适用场景只是个建议，理论来说，所有场景都行（力大砖飞，手动无敌）\n但是合适的场景会更省心一点。\n后缀为默认后缀，本质上都是文本类型文件，一般服务器上都是叫.conf,具体看打开之后的格式。\nini 介绍：最早的配置文件格式，解析简单，由win开始广泛使用\n后缀：.ini\n适用：层次简单的配置项，一般只有一层嵌套。\n; 注释用分号表示，由节、键、值 组成 ; 节类似于作用域，没有明确的结尾， [sction1] ; 节 key=vaue ; 键=值 [sction2] ; 第二个节开始 key=vaue ; 键=值 xml 介绍：最严格，程序解析简单，但是由于存在大量的关闭标签，导致新增配置项比较麻烦，配置效率低\n后缀：.xml\n建议：适用于默认配置或者存在自动格式化的场景(如果愿意手动对齐，放在服务器也是极好的)\n\u0026lt;!-- 注释是文本需要被左右两边包裹 --\u0026gt; \u0026lt;!-- 配置由节点组成，节点下可以是数值，也可以是节点，但是选择一种 --\u0026gt; \u0026lt;key\u0026gt; \u0026lt;aaa\u0026gt;v1\u0026lt;/aaa\u0026gt; \u0026lt;aaa\u0026gt;v2\u0026lt;/aaa\u0026gt; \u0026lt;bbb\u0026gt; \u0026lt;ccc\u0026gt;ccc\u0026lt;/ccc\u0026gt; \u0026lt;/bbb\u0026gt; \u0026lt;/key\u0026gt; property 介绍：主流配置方式，一行一个,结构简单，程序读取方便，存在嵌套结构时会出现大量重复前缀\n后缀：.property\n建议：比较适用于在服务器环境，或者简单基础配置解析的场景，适合配置项的新增和删除\n# 以#开始的行为注释行 a=1 a.b.a=2 a.b.a=3 b=3 yml 介绍：可读性很强,程序解析简单，但是配置层次关系依赖于缩进（注意：冒号后要空一格）\n后缀：.yml\n建议：适用于层次结构复杂，仅修改配置值，或者是有完善的格式化环境。\n# 以#开始的行为注释行 # 使用 - 来标记列表 key: a: v1 b: v2 list: - s1 - s2 map: k1: v1 k2: v2 toml 介绍：据说是yml的升级版本，像ini和yml的结合,语法有点多","title":"各种各样的配置文件类型"},{"content":"背景 toB业务，最终交付的是一个客户端，需要提供前端控制页面，需要将前端也进行编译打包到同一个zip中，并且需要兼容jenkins，一步打包到位。\n原理 由于使用umi开发前端，所以正式使用之前先得进行编译。需要使用maven触发编译，打包为zip需要使用assembly插件\n再将js文件打包进行项目目录，由于是直接使用，没有nginx的容器， 需要spring-web充当容器，对前端资源进行转发。同时，spring-web也提供后端接口。\n实现 原理可行，开始实现\n目录结构 项目目录结构基于Maven项目，前端文件放哪都行，只要后面路径配置得一直就没啥问题。\n主要目录结构如下：\nbin \u0026hellip;启动脚本 config \u0026hellip;配置 assembly assembly.xml react(前端代码) src main \u0026hellip;其他文件 resources public \u0026hellip;其他文件 target pom.xml 配置 1. 修改umi配置输出目录 修改配置文件.umirc.ts， 添加配置项 outputPath: '../src/main/resources/public/'\n// .umirc.ts export default defineConfig({ // 其他配置 outputPath: \u0026#39;../src/main/resources/public/\u0026#39;, }); 2. 修改maven配置文件 添加react编译插件，用于编译umi项目 \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;com.github.eirslett\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;frontend-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.14.0\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;nodeDownloadRoot\u0026gt;https://npm.taobao.org/mirrors/node/\u0026lt;/nodeDownloadRoot\u0026gt; \u0026lt;npmDownloadRoot\u0026gt;https://registry.npm.taobao.org/npm/-/\u0026lt;/npmDownloadRoot\u0026gt; \u0026lt;installDirectory\u0026gt;react\u0026lt;/installDirectory\u0026gt; \u0026lt;workingDirectory\u0026gt;react\u0026lt;/workingDirectory\u0026gt; \u0026lt;nodeVersion\u0026gt;v16.19.0\u0026lt;/nodeVersion\u0026gt; \u0026lt;yarnVersion\u0026gt;v1.22.10\u0026lt;/yarnVersion\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;!-- 构建时自动安装 node 和 yarn --\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;install node and yarn\u0026lt;/id\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;install-node-and-yarn\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;!-- 构建时执行 yarn install --\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;yarn install\u0026lt;/id\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;yarn\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;phase\u0026gt;generate-resources\u0026lt;/phase\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;arguments\u0026gt;install\u0026lt;/arguments\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;!-- 构建时执行 yarn build --\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;yarn build\u0026lt;/id\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;yarn\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;arguments\u0026gt;build\u0026lt;/arguments\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; 添加assembly打包插件,并且指明assembly脚本路径 \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-assembly-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;make-assembly\u0026lt;/id\u0026gt; \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;single\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;skipAssembly\u0026gt;${skipAssembly}\u0026lt;/skipAssembly\u0026gt; \u0026lt;descriptors\u0026gt; \u0026lt;descriptor\u0026gt;assembly/assembly.xml\u0026lt;/descriptor\u0026gt; \u0026lt;/descriptors\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;appendAssemblyId\u0026gt;false\u0026lt;/appendAssemblyId\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; 3. 编写assembly脚本 \u0026lt;assembly xmlns=\u0026#34;http://maven.apache.org/ASSEMBLY/2.1.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/ASSEMBLY/2.1.0 http://maven.apache.org/xsd/assembly-2.1.0.xsd\u0026#34;\u0026gt; \u0026lt;id\u0026gt;assembly\u0026lt;/id\u0026gt; \u0026lt;!-- 最终打包成一个用于发布的zip文件 --\u0026gt; \u0026lt;formats\u0026gt; \u0026lt;format\u0026gt;zip\u0026lt;/format\u0026gt; \u0026lt;/formats\u0026gt; \u0026lt;!-- 添加maven的lib依赖 --\u0026gt; \u0026lt;dependencySets\u0026gt; \u0026lt;dependencySet\u0026gt; \u0026lt;outputDirectory\u0026gt;lib\u0026lt;/outputDirectory\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependencySet\u0026gt; \u0026lt;/dependencySets\u0026gt; \u0026lt;fileSets\u0026gt; \u0026lt;!-- 把项目的本地lib依赖 ，打包进zip文件的lib --\u0026gt; \u0026lt;fileSet\u0026gt; \u0026lt;directory\u0026gt;${project.basedir}/lib\u0026lt;/directory\u0026gt; \u0026lt;outputDirectory\u0026gt;lib\u0026lt;/outputDirectory\u0026gt; \u0026lt;includes\u0026gt; \u0026lt;include\u0026gt;*\u0026lt;/include\u0026gt; \u0026lt;/includes\u0026gt; \u0026lt;/fileSet\u0026gt; \u0026lt;!-- 把项目的脚本文件目录配置 ，打包进zip文件的conf --\u0026gt; \u0026lt;fileSet\u0026gt; \u0026lt;directory\u0026gt;${project.basedir}/config\u0026lt;/directory\u0026gt; \u0026lt;outputDirectory\u0026gt;config\u0026lt;/outputDirectory\u0026gt; \u0026lt;includes\u0026gt; \u0026lt;include\u0026gt;*.*\u0026lt;/include\u0026gt; \u0026lt;/includes\u0026gt; \u0026lt;/fileSet\u0026gt; \u0026lt;!--添加前端--\u0026gt; \u0026lt;fileSet\u0026gt; \u0026lt;directory\u0026gt;${basedir}/src/main/resources/public\u0026lt;/directory\u0026gt; \u0026lt;outputDirectory\u0026gt;public\u0026lt;/outputDirectory\u0026gt; \u0026lt;includes\u0026gt; \u0026lt;include\u0026gt;**/*\u0026lt;/include\u0026gt; \u0026lt;/includes\u0026gt; \u0026lt;/fileSet\u0026gt; \u0026lt;!-- 把项目的脚本文件目录中的启动脚本文件，打包进zip文件的跟目录 --\u0026gt; \u0026lt;fileSet\u0026gt; \u0026lt;directory\u0026gt;${project.basedir}/bin\u0026lt;/directory\u0026gt; \u0026lt;outputDirectory\u0026gt;bin\u0026lt;/outputDirectory\u0026gt; \u0026lt;includes\u0026gt; \u0026lt;include\u0026gt;*.bat\u0026lt;/include\u0026gt; \u0026lt;/includes\u0026gt; \u0026lt;/fileSet\u0026gt; \u0026lt;fileSet\u0026gt; \u0026lt;directory\u0026gt;${project.basedir}/bin\u0026lt;/directory\u0026gt; \u0026lt;outputDirectory\u0026gt;bin\u0026lt;/outputDirectory\u0026gt; \u0026lt;directoryMode\u0026gt;0777\u0026lt;/directoryMode\u0026gt; \u0026lt;fileMode\u0026gt;0777\u0026lt;/fileMode\u0026gt; \u0026lt;lineEnding\u0026gt;unix\u0026lt;/lineEnding\u0026gt; \u0026lt;includes\u0026gt; \u0026lt;include\u0026gt;*.sh\u0026lt;/include\u0026gt; \u0026lt;/includes\u0026gt; \u0026lt;/fileSet\u0026gt; \u0026lt;/fileSets\u0026gt; \u0026lt;/assembly\u0026gt; 打包 执行mvn clean package -Dmaven.test.skip=true进行打包 然后等待片刻，打包完成\n打包后的压缩包 编译后的前端 ","permalink":"https://blog.morz.cc/posts/technology/web/all-in-one/","summary":"背景 toB业务，最终交付的是一个客户端，需要提供前端控制页面，需要将前端也进行编译打包到同一个zip中，并且需要兼容jenkins，一步打包到位。\n原理 由于使用umi开发前端，所以正式使用之前先得进行编译。需要使用maven触发编译，打包为zip需要使用assembly插件\n再将js文件打包进行项目目录，由于是直接使用，没有nginx的容器， 需要spring-web充当容器，对前端资源进行转发。同时，spring-web也提供后端接口。\n实现 原理可行，开始实现\n目录结构 项目目录结构基于Maven项目，前端文件放哪都行，只要后面路径配置得一直就没啥问题。\n主要目录结构如下：\nbin \u0026hellip;启动脚本 config \u0026hellip;配置 assembly assembly.xml react(前端代码) src main \u0026hellip;其他文件 resources public \u0026hellip;其他文件 target pom.xml 配置 1. 修改umi配置输出目录 修改配置文件.umirc.ts， 添加配置项 outputPath: '../src/main/resources/public/'\n// .umirc.ts export default defineConfig({ // 其他配置 outputPath: \u0026#39;../src/main/resources/public/\u0026#39;, }); 2. 修改maven配置文件 添加react编译插件，用于编译umi项目 \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;com.github.eirslett\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;frontend-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.14.0\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;nodeDownloadRoot\u0026gt;https://npm.taobao.org/mirrors/node/\u0026lt;/nodeDownloadRoot\u0026gt; \u0026lt;npmDownloadRoot\u0026gt;https://registry.npm.taobao.org/npm/-/\u0026lt;/npmDownloadRoot\u0026gt; \u0026lt;installDirectory\u0026gt;react\u0026lt;/installDirectory\u0026gt; \u0026lt;workingDirectory\u0026gt;react\u0026lt;/workingDirectory\u0026gt; \u0026lt;nodeVersion\u0026gt;v16.19.0\u0026lt;/nodeVersion\u0026gt; \u0026lt;yarnVersion\u0026gt;v1.22.10\u0026lt;/yarnVersion\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;!-- 构建时自动安装 node 和 yarn --\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;install node and yarn\u0026lt;/id\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;install-node-and-yarn\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;!","title":"整合前端（umi）到后端（spring-boot）中"},{"content":"简介 用于记录一些乱七八糟的Widget（速查表）\n布局 Expanded 可以设置元素的占用空间比例大小。\nconst Expanded({ Key key, int flex = 1, @required Widget child, }) flex 占比大小，默认是100% 多个Expanded并列时，单个Expanded占用空间为flex/sum(flex) child 即需要分配的Widget 例子:参考博客\n","permalink":"https://blog.morz.cc/posts/technology/flutter/widget/","summary":"简介 用于记录一些乱七八糟的Widget（速查表）\n布局 Expanded 可以设置元素的占用空间比例大小。\nconst Expanded({ Key key, int flex = 1, @required Widget child, }) flex 占比大小，默认是100% 多个Expanded并列时，单个Expanded占用空间为flex/sum(flex) child 即需要分配的Widget 例子:参考博客","title":"Widget记录"},{"content":"简介 正所谓，Flutter不能失去GetX，就像西方不是失去耶路撒冷。GetX作为Flutter的轮椅般的存在，是使用Flutter中必不可少的一个组件。\n相关文档 最权威的当然是各种官网的文档，建议优先参考，本文不赘述安装、导入过程。\nGitHub Pub Pub上的文档挺全的\n使用 ","permalink":"https://blog.morz.cc/posts/technology/flutter/get/","summary":"简介 正所谓，Flutter不能失去GetX，就像西方不是失去耶路撒冷。GetX作为Flutter的轮椅般的存在，是使用Flutter中必不可少的一个组件。\n相关文档 最权威的当然是各种官网的文档，建议优先参考，本文不赘述安装、导入过程。\nGitHub Pub Pub上的文档挺全的\n使用 ","title":"GetX使用说明"},{"content":"现象 在本地运行测试好好的，发布到托管环境格式就乱了。\n检查 打开控制台后，发现console下有一条报错： 说css的校验失效，导致资源被锁定。所以格式全部都乱了。\n原因 由于Linux使用的是LF作为换行符，Windows使用CRLF作为换行符号。所以在跨环境时，换行符会发生变化。\n而由于hugo是每次都会重新生成css，导致跨环境之后的校验失效。\n解决方案 不跨环境（这不是废话） 找到校验的代码，我的是在这里，themes/PaperMod/layouts/partials/head.html\n当然，不同的主题可能位置不一样，但是结构应该和下面类似： 找到后有两个方法： 可以直接将74行的代码复制到第72行（也就是去掉了integrity校验） 也可以基于70行的判断，在项目配置文件中添加 params.assets.disableFingerprinting: true 来跳过校验 ","permalink":"https://blog.morz.cc/posts/technology/hugo/integrity/","summary":"现象 在本地运行测试好好的，发布到托管环境格式就乱了。\n检查 打开控制台后，发现console下有一条报错： 说css的校验失效，导致资源被锁定。所以格式全部都乱了。\n原因 由于Linux使用的是LF作为换行符，Windows使用CRLF作为换行符号。所以在跨环境时，换行符会发生变化。\n而由于hugo是每次都会重新生成css，导致跨环境之后的校验失效。\n解决方案 不跨环境（这不是废话） 找到校验的代码，我的是在这里，themes/PaperMod/layouts/partials/head.html\n当然，不同的主题可能位置不一样，但是结构应该和下面类似： 找到后有两个方法： 可以直接将74行的代码复制到第72行（也就是去掉了integrity校验） 也可以基于70行的判断，在项目配置文件中添加 params.assets.disableFingerprinting: true 来跳过校验 ","title":"Hugo页面样式加载失败"},{"content":"简介 作为Flutter的半orm框架，Drift确实达到了好用的程度。本文不去对比其他框架，仅就使用过程中的一些坑或者技巧做一点小小的记录。\n相关文档 最权威的当然是各种官网的文档，建议优先参考，本文不赘述安装、导入过程。\n官方文档 GitHub Pub 使用 参考文档，先这样，然后这样，再那样，就好啦～\n# 注意：由于Dart不支持反射等操作，导致dao及相关类不能自动生成，需要手动执行以下指令进行生成。 $ dart run build_runner build 问题 Tables can\u0026rsquo;t override primaryKey and use autoIncrement() 设置自增就默认为主键，不用再额外指定主键了，但是指定了也只是警告，问题不大。 数据文件路径（安卓虚拟机）\n/data/user/0/{包名}/app_flutter/db.sqlite ","permalink":"https://blog.morz.cc/posts/technology/flutter/drift/","summary":"简介 作为Flutter的半orm框架，Drift确实达到了好用的程度。本文不去对比其他框架，仅就使用过程中的一些坑或者技巧做一点小小的记录。\n相关文档 最权威的当然是各种官网的文档，建议优先参考，本文不赘述安装、导入过程。\n官方文档 GitHub Pub 使用 参考文档，先这样，然后这样，再那样，就好啦～\n# 注意：由于Dart不支持反射等操作，导致dao及相关类不能自动生成，需要手动执行以下指令进行生成。 $ dart run build_runner build 问题 Tables can\u0026rsquo;t override primaryKey and use autoIncrement() 设置自增就默认为主键，不用再额外指定主键了，但是指定了也只是警告，问题不大。 数据文件路径（安卓虚拟机）\n/data/user/0/{包名}/app_flutter/db.sqlite ","title":"Drift使用说明"},{"content":"前言 一直想自己搭建个博客做记录，偶然间了解到静态站。\n由于会Vue3，最开始打算使用vue-press的，但是调查发现，有三个主流的静态博客工具。也有现成的静态托管方案。\n于是乎，在对比了jekyll、hugo、hexo后，果断的选择了hugo（反正都没用过，就选星星最多的）。\n遂，域名，空间，博客一把梭。\n记录下 Hogu 的安装过程\n安装 当然是看 官方安装文档 啊，不然真的看博客啊。\n配置 配置就有得说了，官网的东西有点乱。\n使用 我还不太熟，用熟了再补充\n","permalink":"https://blog.morz.cc/posts/technology/hugo/setup/","summary":"前言 一直想自己搭建个博客做记录，偶然间了解到静态站。\n由于会Vue3，最开始打算使用vue-press的，但是调查发现，有三个主流的静态博客工具。也有现成的静态托管方案。\n于是乎，在对比了jekyll、hugo、hexo后，果断的选择了hugo（反正都没用过，就选星星最多的）。\n遂，域名，空间，博客一把梭。\n记录下 Hogu 的安装过程\n安装 当然是看 官方安装文档 啊，不然真的看博客啊。\n配置 配置就有得说了，官网的东西有点乱。\n使用 我还不太熟，用熟了再补充","title":"安装Hugo"}]