<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>🍑网站 on 墨渍</title>
    <link>https://blog.morz.cc/posts/technology/web/</link>
    <description>Recent content in 🍑网站 on 墨渍</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 07 Nov 2023 17:48:52 +0800</lastBuildDate><atom:link href="https://blog.morz.cc/posts/technology/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用ckeditor发送邮件</title>
      <link>https://blog.morz.cc/posts/technology/web/ckeditor-to-email/</link>
      <pubDate>Tue, 07 Nov 2023 17:48:52 +0800</pubDate>
      
      <guid>https://blog.morz.cc/posts/technology/web/ckeditor-to-email/</guid>
      <description>背景 有个需求，要给客户批量发邮件。需要包含复杂表格，不能用excel，需要直接展示。
最开始采用了WangEdit,简单快捷，但是表格功能不强，只能增减格子，于是又各种查，找到了ckeditor。 鉴于在实现过程中发现了很多坑，在此记录一下。
多年老坑:
Possible to make editor.getData() returns content with inline styles?
环境 前端脚手架: umi node: V18 安装CkEditor CKEditor有很多插件，不同的功能通过插件实现，安装的过程，就是将插件引入项目的过程。
打开Quick start 可以安装步骤构建一个简单的富文本编辑器。
但是显然这个简单的文本编辑器满足不了我的需求，但是有个在线构建说明 可以满足。\
打开在线构建页面 选择Classic模式 然后按照需求选择插件，默认选择中的Cloud Services是高级功能，要加钱，不要可以去掉，下面右上角有PREMIUM 标记的插件也是要加钱的。 然后选择哪些按钮常驻，哪些按钮隐藏（可以添加了插件，但是展示功能入口） 选择语言 然后就可以下载拉，如果选择的插件中有高级功能，会有一个要求添加license key的提示，可以返回第二步修改 下载完成后是一个zip，解压后打开sample/index.html查看效果，如果合适，则开始引入项目。 安装必须组件 // ckeditor react 组件 yarn add @ckeditor/ckeditor5-react @ckeditor/ckeditor5-build-classic // 将class转换为内联style,发邮件的时候用 yarn add juice 将build目录下全部文件拷贝到src/components/ckeditor下,并添加CkeditorUtil.ts 和 index.tsx // CkeditorUtil.ts // 参考 https://github.com/ckeditor/ckeditor5/issues/1627 import juice from &amp;#39;juice&amp;#39;; // @ts-ignore export const CkeditorUtil = { getEditorStyles() { const cssTexts = [], rootCssTexts = []; for (const styleSheets of document.</description>
    </item>
    
    <item>
      <title>gpg小记</title>
      <link>https://blog.morz.cc/posts/technology/web/gpg-tips/</link>
      <pubDate>Fri, 06 Oct 2023 10:24:36 +0800</pubDate>
      
      <guid>https://blog.morz.cc/posts/technology/web/gpg-tips/</guid>
      <description>从公钥服务器接收失败 命令：
apt-key adv --keyserver keyserver.ubuntu.com --recv xxxx 错误提示：
gpg: keyserver receive failed: Server indicated a failure
gpg: 从公钥服务器接收失败：Server indicated a failure
解决方案
由于keyserver.ubuntu.com开放80端口，需要手动指定，否则会使用默认端口11371 添加协议名和端口后为： apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv xxxx 如果方案1中继续报错，可能是由于域名解析失败导致，可以在/etc/resolv.conf中修改dns配置为 nameserver 8.8.8.8 # Google DNS 或 nameserver 1.1.1.1 # Cloudflare 如果不可修改DNS或者修改后依旧失败，则可以使用ping来获取keyserver.ubuntu.com的真实IP，再替换到域名 ping keyserver.ubuntu.com #获取ip，我获取的是 185.125.188.27 apt-key adv --keyserver hkp://185.125.188.27:80 --recv xxxx #使用IP替换域名 签名失败 提示信息 gpg: 签名时失败： Inappropriate ioctl for device gpg: signing failed: Inappropriate ioctl for device 原因： gpg在签名时需要使用终端，但是当前终端没有输入输出，所以会报错。</description>
    </item>
    
    <item>
      <title>整合前端（umi）到后端（spring-boot）中</title>
      <link>https://blog.morz.cc/posts/technology/web/all-in-one/</link>
      <pubDate>Fri, 04 Aug 2023 10:50:34 +0800</pubDate>
      
      <guid>https://blog.morz.cc/posts/technology/web/all-in-one/</guid>
      <description>背景 toB业务，最终交付的是一个客户端，需要提供前端控制页面，需要将前端也进行编译打包到同一个zip中，并且需要兼容jenkins，一步打包到位。
原理 由于使用umi开发前端，所以正式使用之前先得进行编译。需要使用maven触发编译，打包为zip需要使用assembly插件
再将js文件打包进行项目目录，由于是直接使用，没有nginx的容器， 需要spring-web充当容器，对前端资源进行转发。同时，spring-web也提供后端接口。
实现 原理可行，开始实现
目录结构 项目目录结构基于Maven项目，前端文件放哪都行，只要后面路径配置得一直就没啥问题。
主要目录结构如下：
bin &amp;hellip;启动脚本 config &amp;hellip;配置 assembly assembly.xml react(前端代码) src main &amp;hellip;其他文件 resources public &amp;hellip;其他文件 target pom.xml 配置 1. 修改umi配置输出目录 修改配置文件.umirc.ts， 添加配置项 outputPath: &#39;../src/main/resources/public/&#39;
// .umirc.ts export default defineConfig({ // 其他配置 outputPath: &amp;#39;../src/main/resources/public/&amp;#39;, }); 2. 修改maven配置文件 添加react编译插件，用于编译umi项目 &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;com.github.eirslett&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;frontend-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.14.0&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;nodeDownloadRoot&amp;gt;https://npm.taobao.org/mirrors/node/&amp;lt;/nodeDownloadRoot&amp;gt; &amp;lt;npmDownloadRoot&amp;gt;https://registry.npm.taobao.org/npm/-/&amp;lt;/npmDownloadRoot&amp;gt; &amp;lt;installDirectory&amp;gt;react&amp;lt;/installDirectory&amp;gt; &amp;lt;workingDirectory&amp;gt;react&amp;lt;/workingDirectory&amp;gt; &amp;lt;nodeVersion&amp;gt;v16.19.0&amp;lt;/nodeVersion&amp;gt; &amp;lt;yarnVersion&amp;gt;v1.22.10&amp;lt;/yarnVersion&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;!-- 构建时自动安装 node 和 yarn --&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;install node and yarn&amp;lt;/id&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;install-node-and-yarn&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;!</description>
    </item>
    
  </channel>
</rss>
